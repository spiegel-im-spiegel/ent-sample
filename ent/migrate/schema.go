// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BinaryFilesColumns holds the columns for the "binary_files" table.
	BinaryFilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "filename", Type: field.TypeString, Unique: true},
		{Name: "body", Type: field.TypeBytes, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_owned", Type: field.TypeInt, Nullable: true},
	}
	// BinaryFilesTable holds the schema information for the "binary_files" table.
	BinaryFilesTable = &schema.Table{
		Name:       "binary_files",
		Columns:    BinaryFilesColumns,
		PrimaryKey: []*schema.Column{BinaryFilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "binary_files_users_owned",
				Columns:    []*schema.Column{BinaryFilesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"postgres": "varchar(63)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BinaryFilesTable,
		UsersTable,
	}
)

func init() {
	BinaryFilesTable.ForeignKeys[0].RefTable = UsersTable
}
