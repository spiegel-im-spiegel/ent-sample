// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sample/ent/binaryfile"
	"sample/ent/predicate"
	"sample/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BinaryFileUpdate is the builder for updating BinaryFile entities.
type BinaryFileUpdate struct {
	config
	hooks    []Hook
	mutation *BinaryFileMutation
}

// Where appends a list predicates to the BinaryFileUpdate builder.
func (bfu *BinaryFileUpdate) Where(ps ...predicate.BinaryFile) *BinaryFileUpdate {
	bfu.mutation.Where(ps...)
	return bfu
}

// SetFilename sets the "filename" field.
func (bfu *BinaryFileUpdate) SetFilename(s string) *BinaryFileUpdate {
	bfu.mutation.SetFilename(s)
	return bfu
}

// SetBody sets the "body" field.
func (bfu *BinaryFileUpdate) SetBody(b []byte) *BinaryFileUpdate {
	bfu.mutation.SetBody(b)
	return bfu
}

// ClearBody clears the value of the "body" field.
func (bfu *BinaryFileUpdate) ClearBody() *BinaryFileUpdate {
	bfu.mutation.ClearBody()
	return bfu
}

// SetCreatedAt sets the "created_at" field.
func (bfu *BinaryFileUpdate) SetCreatedAt(t time.Time) *BinaryFileUpdate {
	bfu.mutation.SetCreatedAt(t)
	return bfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bfu *BinaryFileUpdate) SetNillableCreatedAt(t *time.Time) *BinaryFileUpdate {
	if t != nil {
		bfu.SetCreatedAt(*t)
	}
	return bfu
}

// SetUpdatedAt sets the "updated_at" field.
func (bfu *BinaryFileUpdate) SetUpdatedAt(t time.Time) *BinaryFileUpdate {
	bfu.mutation.SetUpdatedAt(t)
	return bfu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bfu *BinaryFileUpdate) SetNillableUpdatedAt(t *time.Time) *BinaryFileUpdate {
	if t != nil {
		bfu.SetUpdatedAt(*t)
	}
	return bfu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (bfu *BinaryFileUpdate) SetOwnerID(id int) *BinaryFileUpdate {
	bfu.mutation.SetOwnerID(id)
	return bfu
}

// SetOwner sets the "owner" edge to the User entity.
func (bfu *BinaryFileUpdate) SetOwner(u *User) *BinaryFileUpdate {
	return bfu.SetOwnerID(u.ID)
}

// Mutation returns the BinaryFileMutation object of the builder.
func (bfu *BinaryFileUpdate) Mutation() *BinaryFileMutation {
	return bfu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (bfu *BinaryFileUpdate) ClearOwner() *BinaryFileUpdate {
	bfu.mutation.ClearOwner()
	return bfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bfu *BinaryFileUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bfu.hooks) == 0 {
		if err = bfu.check(); err != nil {
			return 0, err
		}
		affected, err = bfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BinaryFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bfu.check(); err != nil {
				return 0, err
			}
			bfu.mutation = mutation
			affected, err = bfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bfu.hooks) - 1; i >= 0; i-- {
			if bfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bfu *BinaryFileUpdate) SaveX(ctx context.Context) int {
	affected, err := bfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bfu *BinaryFileUpdate) Exec(ctx context.Context) error {
	_, err := bfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfu *BinaryFileUpdate) ExecX(ctx context.Context) {
	if err := bfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bfu *BinaryFileUpdate) check() error {
	if v, ok := bfu.mutation.Filename(); ok {
		if err := binaryfile.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf("ent: validator failed for field \"filename\": %w", err)}
		}
	}
	if _, ok := bfu.mutation.OwnerID(); bfu.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (bfu *BinaryFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   binaryfile.Table,
			Columns: binaryfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: binaryfile.FieldID,
			},
		},
	}
	if ps := bfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bfu.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binaryfile.FieldFilename,
		})
	}
	if value, ok := bfu.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: binaryfile.FieldBody,
		})
	}
	if bfu.mutation.BodyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: binaryfile.FieldBody,
		})
	}
	if value, ok := bfu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: binaryfile.FieldCreatedAt,
		})
	}
	if value, ok := bfu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: binaryfile.FieldUpdatedAt,
		})
	}
	if bfu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binaryfile.OwnerTable,
			Columns: []string{binaryfile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binaryfile.OwnerTable,
			Columns: []string{binaryfile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{binaryfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BinaryFileUpdateOne is the builder for updating a single BinaryFile entity.
type BinaryFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BinaryFileMutation
}

// SetFilename sets the "filename" field.
func (bfuo *BinaryFileUpdateOne) SetFilename(s string) *BinaryFileUpdateOne {
	bfuo.mutation.SetFilename(s)
	return bfuo
}

// SetBody sets the "body" field.
func (bfuo *BinaryFileUpdateOne) SetBody(b []byte) *BinaryFileUpdateOne {
	bfuo.mutation.SetBody(b)
	return bfuo
}

// ClearBody clears the value of the "body" field.
func (bfuo *BinaryFileUpdateOne) ClearBody() *BinaryFileUpdateOne {
	bfuo.mutation.ClearBody()
	return bfuo
}

// SetCreatedAt sets the "created_at" field.
func (bfuo *BinaryFileUpdateOne) SetCreatedAt(t time.Time) *BinaryFileUpdateOne {
	bfuo.mutation.SetCreatedAt(t)
	return bfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bfuo *BinaryFileUpdateOne) SetNillableCreatedAt(t *time.Time) *BinaryFileUpdateOne {
	if t != nil {
		bfuo.SetCreatedAt(*t)
	}
	return bfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bfuo *BinaryFileUpdateOne) SetUpdatedAt(t time.Time) *BinaryFileUpdateOne {
	bfuo.mutation.SetUpdatedAt(t)
	return bfuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bfuo *BinaryFileUpdateOne) SetNillableUpdatedAt(t *time.Time) *BinaryFileUpdateOne {
	if t != nil {
		bfuo.SetUpdatedAt(*t)
	}
	return bfuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (bfuo *BinaryFileUpdateOne) SetOwnerID(id int) *BinaryFileUpdateOne {
	bfuo.mutation.SetOwnerID(id)
	return bfuo
}

// SetOwner sets the "owner" edge to the User entity.
func (bfuo *BinaryFileUpdateOne) SetOwner(u *User) *BinaryFileUpdateOne {
	return bfuo.SetOwnerID(u.ID)
}

// Mutation returns the BinaryFileMutation object of the builder.
func (bfuo *BinaryFileUpdateOne) Mutation() *BinaryFileMutation {
	return bfuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (bfuo *BinaryFileUpdateOne) ClearOwner() *BinaryFileUpdateOne {
	bfuo.mutation.ClearOwner()
	return bfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bfuo *BinaryFileUpdateOne) Select(field string, fields ...string) *BinaryFileUpdateOne {
	bfuo.fields = append([]string{field}, fields...)
	return bfuo
}

// Save executes the query and returns the updated BinaryFile entity.
func (bfuo *BinaryFileUpdateOne) Save(ctx context.Context) (*BinaryFile, error) {
	var (
		err  error
		node *BinaryFile
	)
	if len(bfuo.hooks) == 0 {
		if err = bfuo.check(); err != nil {
			return nil, err
		}
		node, err = bfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BinaryFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bfuo.check(); err != nil {
				return nil, err
			}
			bfuo.mutation = mutation
			node, err = bfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bfuo.hooks) - 1; i >= 0; i-- {
			if bfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bfuo *BinaryFileUpdateOne) SaveX(ctx context.Context) *BinaryFile {
	node, err := bfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bfuo *BinaryFileUpdateOne) Exec(ctx context.Context) error {
	_, err := bfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfuo *BinaryFileUpdateOne) ExecX(ctx context.Context) {
	if err := bfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bfuo *BinaryFileUpdateOne) check() error {
	if v, ok := bfuo.mutation.Filename(); ok {
		if err := binaryfile.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf("ent: validator failed for field \"filename\": %w", err)}
		}
	}
	if _, ok := bfuo.mutation.OwnerID(); bfuo.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (bfuo *BinaryFileUpdateOne) sqlSave(ctx context.Context) (_node *BinaryFile, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   binaryfile.Table,
			Columns: binaryfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: binaryfile.FieldID,
			},
		},
	}
	id, ok := bfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BinaryFile.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := bfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, binaryfile.FieldID)
		for _, f := range fields {
			if !binaryfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != binaryfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bfuo.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binaryfile.FieldFilename,
		})
	}
	if value, ok := bfuo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: binaryfile.FieldBody,
		})
	}
	if bfuo.mutation.BodyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: binaryfile.FieldBody,
		})
	}
	if value, ok := bfuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: binaryfile.FieldCreatedAt,
		})
	}
	if value, ok := bfuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: binaryfile.FieldUpdatedAt,
		})
	}
	if bfuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binaryfile.OwnerTable,
			Columns: []string{binaryfile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binaryfile.OwnerTable,
			Columns: []string{binaryfile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BinaryFile{config: bfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{binaryfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
